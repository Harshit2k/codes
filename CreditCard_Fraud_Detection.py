# -*- coding: utf-8 -*-
"""Task_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1swKQZ13-bEbgFyAleD1sqXtTRD_2uabM

**Fraud Detection**

**Importing Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns; sns.set()

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, roc_auc_score, roc_curve

from imblearn.under_sampling import RandomUnderSampler

from IPython.display import Image  
from sklearn.tree import export_graphviz
import pydotplus

# %matplotlib inline

from google.colab import files
uploaded=files.upload()

import io
dataset=pd.read_csv(io.BytesIO(uploaded['Credit_Card_Applications.csv']))

"""**Data Preprocessing**"""

dataset.head(5)

print(dataset.columns)

dataset.isnull().sum()

dataset.describe()

data = dataset.sample(frac = 0.2, random_state = 1)
print(data.shape)

"""**Data Analysis**"""

sns.countplot('Class', data=data)

"""**Fraud to non fraud ratio**"""

print("Fraud to NonFraud Ratio of {:.3f}%".format(492/284315*100))

plt.style.use('bmh')
sns.kdeplot(dataset.CustomerID[dataset.Class == 0], label = 'Fraud', shade=True)
sns.kdeplot(dataset.CustomerID[dataset.Class == 1], label = 'NonFraud', shade=True)
plt.xlabel('CustomerID')

plt.figure(figsize=(15,15))
sns.heatmap(data.corr()) # Displaying the Heatmap

plt.title('Heatmap correlation')
plt.show()

X=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1]

from sklearn.preprocessing import MinMaxScaler
sc=MinMaxScaler(feature_range=(0,1))
X=sc.fit_transform(X)

!pip install minisom

from minisom import MiniSom
som=MiniSom(x=10,y=10,input_len=15,sigma=1.0,learning_rate=0.3,random_seed=101)
som.random_weights_init(X)
som.train_random(data=X, num_iteration=100)

from pylab import bone,pcolor,colorbar,plot,show
bone()
pcolor(som.distance_map().T)
colorbar()
markers=['o','s']
colors=['r','g']
for index,columns in enumerate(X):
  w=som.winner(columns)
  plot(w[0]+0.5,
       w[1]+0.5,
       markers[y[index]],
       markeredgecolor=colors[y[index]],
       markerfacecolor='None',
       markersize=10,
       markeredgewidth=2)

"""-> The red color indicates the customer whose application were not approved and green color were the approved customers.

->The potential fraudsters are in the co-ordinates (4,7) and (8,1).

**Number of fraud and valid cases**
"""

fraud = dataset[dataset['Class'] == 1]
valid = dataset[dataset['Class'] == 0]

outlier_fraction = len(fraud) / float(len(valid))
print(outlier_fraction)

print('Fraud Cases: {}'.format(len(fraud)))
print('Valid Cases: {}'.format(len(valid)))

"""**Websites from which i took reference**:

-> Kaggle.com

-> Medium.com

-> Stackoverflow.com
"""