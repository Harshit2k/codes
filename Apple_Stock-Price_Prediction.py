# -*- coding: utf-8 -*-
"""Task_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dHiar8BR5j09DJO_7dqXXz5aLqfmqcZR

**Apple Stock Price Prediction**

**Importing Librearies**
"""

import numpy as np
import pandas as pd
import pandas_datareader as web
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import seaborn
import yfinance as yf

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

"""**Getting the dataset**"""

Df = yf.download('AAPL',start='2008-01-01',end='2020-12-31')
Df=Df[['Close']] 
Df= Df.dropna() 
Df.Close.plot(figsize=(10,5)) 
plt.ylabel("AAPL Prices")
plt.show()

apple_processed=Df.iloc[:, 1:2].values

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range = (0, 1))

apple_training_scaled = scaler.fit_transform(apple_processed)

"""**Converting training data to right shape**"""

features_set = []
labels = []
for i in range(60, 1259):
    features_set.append(apple_training_scaled[i-60:i, 0])
    labels.append(apple_training_scaled[i, 0])

features_set, labels = np.array(features_set), np.array(labels)

features_set = np.reshape(features_set, (features_set.shape[0], features_set.shape[1], 1))

"""**Training LSTM**"""

model = Sequential()

model.add(LSTM(units=50, return_sequences=True, input_shape=(features_set.shape[1], 1)))

model.add(Dropout(0.2))

model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50))
model.add(Dropout(0.2))

model.add(Dense(units = 1))

model.compile(optimizer = 'adam', loss = 'mean_squared_error')

"""**Explanatory Variable**"""

Df['S_3'] = Df['Close'].shift(1).rolling(window=3).mean() 
Df['S_9']= Df['Close'].shift(1).rolling(window=9).mean() 
Df= Df.dropna() 
X = Df[['S_3','S_9']] 
X.head()

y = Df['Close']
y.head()

"""**Splitting in Training and Testing set**"""

t=.8
t=int(t*len(Df))
X_train=X[:t]
y_train=y[:t]
X_test=X[t:]
y_test=y[t:]
print("Splitting into training and testing set was successfull")

"""**Fitting the Model**"""

linear=LinearRegression().fit(X_train,y_train)

model.fit(features_set, labels, epochs = 100, batch_size = 32)

"""**Predicting Price**"""

predicted_price = linear.predict(X_test)  
predicted_price = pd.DataFrame(predicted_price,index=y_test.index,columns = ['price'])  
predicted_price.plot(figsize=(10,5))  
y_test.plot()  
plt.legend(['predicted_price','actual_price'])  
plt.ylabel("AAPL Price")  
plt.show()

"""**Accuracy of model**"""

r2_score = linear.score(X[t:],y[t:])*100  
float("{0:.2f}".format(r2_score))

"""**Observation**

-> The R-squared of this model is 99.42%.

-> R-squared is always between 0-100%. A score close to indicates that the model explains the AAPL price well.

**Sites that were useful while doing task**:

-> Medium.com

-> Kaggle.com

-> stackoverflow.com
"""